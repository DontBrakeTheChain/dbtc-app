{"ast":null,"code":"var _jsxFileName = \"/Users/nikpet/Desktop/dbtc/dbtc-app/src/CalendarPage.js\",\n  _s = $RefreshSig$();\nimport \"./index.css\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\"; // Стили по умолчанию\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CalendarPage() {\n  _s();\n  const [selectedDates, setSelectedDates] = useState(() => {\n    const savedDates = localStorage.getItem(\"selectedDates\");\n    return savedDates ? JSON.parse(savedDates) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"selectedDates\", JSON.stringify(selectedDates));\n  }, [selectedDates]);\n  const onSelectDate = date => {\n    const dateString = date.toISOString().split(\"T\")[0];\n    setSelectedDates(currentSelectedDates => currentSelectedDates.includes(dateString) ? currentSelectedDates.filter(d => d !== dateString) : [...currentSelectedDates, dateString]);\n  };\n  const year = new Date().getFullYear();\n  const months = Array.from({\n    length: 12\n  }, (_, index) => new Date(year, index));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: months.map((month, index) => /*#__PURE__*/_jsxDEV(Calendar, {\n      activeStartDate: month,\n      view: \"month\",\n      onClickDay: onSelectDate,\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (view === \"month\") {\n          let dateString = date.toISOString().split(\"T\")[0];\n          if (selectedDates.includes(dateString)) {\n            return \"selectedDay\";\n          }\n        }\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(CalendarPage, \"FE+JTmprBDWbgTgN3dj+CUefavQ=\");\n_c = CalendarPage;\nexport default CalendarPage;\nvar _c;\n$RefreshReg$(_c, \"CalendarPage\");","map":{"version":3,"names":["Calendar","useEffect","useState","jsxDEV","_jsxDEV","CalendarPage","_s","selectedDates","setSelectedDates","savedDates","localStorage","getItem","JSON","parse","setItem","stringify","onSelectDate","date","dateString","toISOString","split","currentSelectedDates","includes","filter","d","year","Date","getFullYear","months","Array","from","length","_","index","className","children","map","month","activeStartDate","view","onClickDay","tileClassName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nikpet/Desktop/dbtc/dbtc-app/src/CalendarPage.js"],"sourcesContent":["import \"./index.css\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\"; // Стили по умолчанию\nimport { useEffect, useState } from \"react\";\n\nfunction CalendarPage() {\n  const [selectedDates, setSelectedDates] = useState(() => {\n    const savedDates = localStorage.getItem(\"selectedDates\");\n    return savedDates ? JSON.parse(savedDates) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"selectedDates\", JSON.stringify(selectedDates));\n  }, [selectedDates]);\n\n  const onSelectDate = (date) => {\n    const dateString = date.toISOString().split(\"T\")[0];\n    setSelectedDates((currentSelectedDates) =>\n      currentSelectedDates.includes(dateString)\n        ? currentSelectedDates.filter((d) => d !== dateString)\n        : [...currentSelectedDates, dateString]\n    );\n  };\n\n  const year = new Date().getFullYear();\n  const months = Array.from(\n    { length: 12 },\n    (_, index) => new Date(year, index)\n  );\n\n  return (\n    <div className=\"calendar-container\">\n      {months.map((month, index) => (\n        <Calendar\n          key={index}\n          activeStartDate={month}\n          view=\"month\"\n          onClickDay={onSelectDate}\n          tileClassName={({ date, view }) => {\n            if (view === \"month\") {\n              let dateString = date.toISOString().split(\"T\")[0];\n              if (selectedDates.includes(dateString)) {\n                return \"selectedDay\";\n              }\n            }\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default CalendarPage;"],"mappings":";;AAAA,OAAO,aAAa;AACpB,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC,CAAC,CAAC;AAC3C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACvD,MAAMO,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,EAAE;EACjD,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACdS,YAAY,CAACI,OAAO,CAAC,eAAe,EAAEF,IAAI,CAACG,SAAS,CAACR,aAAa,CAAC,CAAC;EACtE,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,MAAMS,YAAY,GAAIC,IAAI,IAAK;IAC7B,MAAMC,UAAU,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnDZ,gBAAgB,CAAEa,oBAAoB,IACpCA,oBAAoB,CAACC,QAAQ,CAACJ,UAAU,CAAC,GACrCG,oBAAoB,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKN,UAAU,CAAC,GACpD,CAAC,GAAGG,oBAAoB,EAAEH,UAAU,CAC1C,CAAC;EACH,CAAC;EAED,MAAMO,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CACvB;IAAEC,MAAM,EAAE;EAAG,CAAC,EACd,CAACC,CAAC,EAAEC,KAAK,KAAK,IAAIP,IAAI,CAACD,IAAI,EAAEQ,KAAK,CACpC,CAAC;EAED,oBACE7B,OAAA;IAAK8B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,EAChCP,MAAM,CAACQ,GAAG,CAAC,CAACC,KAAK,EAAEJ,KAAK,kBACvB7B,OAAA,CAACJ,QAAQ;MAEPsC,eAAe,EAAED,KAAM;MACvBE,IAAI,EAAC,OAAO;MACZC,UAAU,EAAExB,YAAa;MACzByB,aAAa,EAAEA,CAAC;QAAExB,IAAI;QAAEsB;MAAK,CAAC,KAAK;QACjC,IAAIA,IAAI,KAAK,OAAO,EAAE;UACpB,IAAIrB,UAAU,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACjD,IAAIb,aAAa,CAACe,QAAQ,CAACJ,UAAU,CAAC,EAAE;YACtC,OAAO,aAAa;UACtB;QACF;MACF;IAAE,GAXGe,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvC,EAAA,CA7CQD,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AA+CrB,eAAeA,YAAY;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}